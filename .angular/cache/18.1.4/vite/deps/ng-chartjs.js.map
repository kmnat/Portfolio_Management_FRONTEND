{
  "version": 3,
  "sources": ["../../../../../node_modules/ng-chartjs/fesm2020/ng-chartjs.mjs"],
  "sourcesContent": ["import * as i0 from '@angular/core';\nimport { Injectable, EventEmitter, Directive, Input, Output, NgModule } from '@angular/core';\nimport Chart$1 from 'chart.js/auto';\nimport { Chart } from 'chart.js';\nclass StoreService {\n  constructor() {\n    this._chartInstances = [];\n    this._chartId = [];\n  }\n  addChart(id, chart) {\n    for (let i = 0; i < this._chartId.length; i++) {\n      if (id === this._chartId[i]) {\n        return;\n      }\n    }\n    this._chartId.push(id);\n    this._chartInstances.push(chart);\n  }\n  removeChart(id) {\n    for (let i = 0; i < this._chartId.length; i++) {\n      if (id === this._chartId[i]) {\n        this._chartId.splice(i, 1);\n        this._chartInstances.splice(i, 1); // delete chart instance.\n      }\n    }\n  }\n  getChart(id) {\n    for (let i = 0; i < this._chartId.length; i++) {\n      if (id === this._chartId[i]) {\n        return this._chartInstances[i];\n      }\n    }\n    return null;\n  }\n}\nStoreService.ɵfac = function StoreService_Factory(__ngFactoryType__) {\n  return new (__ngFactoryType__ || StoreService)();\n};\nStoreService.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n  token: StoreService,\n  factory: StoreService.ɵfac,\n  providedIn: 'root'\n});\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(StoreService, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'root'\n    }]\n  }], null, null);\n})();\nclass NgChartjsCustomPluginConfig {\n  constructor() {\n    this.plugins = [];\n  }\n}\nNgChartjsCustomPluginConfig.ɵfac = function NgChartjsCustomPluginConfig_Factory(__ngFactoryType__) {\n  return new (__ngFactoryType__ || NgChartjsCustomPluginConfig)();\n};\nNgChartjsCustomPluginConfig.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n  token: NgChartjsCustomPluginConfig,\n  factory: NgChartjsCustomPluginConfig.ɵfac,\n  providedIn: 'root'\n});\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(NgChartjsCustomPluginConfig, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'root'\n    }]\n  }], null, null);\n})();\nclass NgChartjsService {\n  constructor(storeService, pluginConfig) {\n    this.storeService = storeService;\n    this.pluginConfig = pluginConfig;\n    if (pluginConfig.plugins.length !== 0) {\n      Chart.register(...pluginConfig.plugins);\n    }\n  }\n  // get chart instance by id\n  getChart(id) {\n    return this.storeService.getChart(id);\n  }\n}\nNgChartjsService.ɵfac = function NgChartjsService_Factory(__ngFactoryType__) {\n  return new (__ngFactoryType__ || NgChartjsService)(i0.ɵɵinject(StoreService), i0.ɵɵinject(NgChartjsCustomPluginConfig));\n};\nNgChartjsService.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n  token: NgChartjsService,\n  factory: NgChartjsService.ɵfac,\n  providedIn: 'root'\n});\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(NgChartjsService, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'root'\n    }]\n  }], function () {\n    return [{\n      type: StoreService\n    }, {\n      type: NgChartjsCustomPluginConfig\n    }];\n  }, null);\n})();\n/**\r\n * 深复制一个json对象\r\n * @source 需要深复制的对象\r\n */\nfunction deepCopyJson(source) {\n  if (!source || typeof source !== 'object') {\n    return source;\n  }\n  const newObj = source.constructor === Array ? [] : {};\n  for (const key in source) {\n    if (typeof source[key] === 'object') {\n      // @ts-ignore\n      newObj[key] = deepCopyJson(source[key]);\n    } else {\n      // @ts-ignore\n      newObj[key] = source[key];\n    }\n  }\n  return newObj;\n}\n/**\r\n* 合并json对象,遇到相同元素级属性，以source为准\r\n* @source 被合并的json对象\r\n* @dest json对象，将此json的属性递归赋值给source\r\n*/\nfunction mergeJson(source, dest) {\n  if (!dest) {\n    return source;\n  }\n  source = source || {};\n  for (const key of Object.keys(dest)) {\n    if (source[key] === undefined) {\n      source[key] = deepCopyJson(dest[key]);\n      continue;\n    }\n    // 冲突了，如果是Object，看看有么有不冲突的属性\n    // 不是Object 则以main为主，忽略即可。故不需要else\n    if (isJson(dest[key])) {\n      // arguments.callee 递归调用，并且与函数名解耦\n      mergeJson(source[key], dest[key]);\n    }\n  }\n  return source;\n}\n/**\r\n* 是否是json对象\r\n* @target 需要被判断的类型\r\n*/\nfunction isJson(target) {\n  if (target === null || target === undefined) {\n    return false;\n  }\n  return typeof target === 'object' && target.constructor === Object;\n}\n\n// Default colors\nconst DefaultColors = [[63, 81, 181], [0, 150, 136], [255, 152, 0], [233, 30, 99], [156, 39, 176], [0, 188, 212], [3, 169, 244], [96, 125, 139], [255, 193, 7], [37, 155, 36], [205, 220, 57], [86, 119, 252] // Blue\n];\nfunction rgba(colour, alpha) {\n  return 'rgba(' + colour.concat(alpha).join(',') + ')';\n}\nfunction getRandomInt(min, max) {\n  return Math.floor(Math.random() * (max - min + 1)) + min;\n}\nfunction formatLineColor(colors) {\n  return {\n    backgroundColor: rgba(colors, 0.35),\n    borderColor: rgba(colors, 1),\n    pointBackgroundColor: rgba(colors, 1),\n    pointBorderColor: '#fff',\n    pointHoverBackgroundColor: '#fff',\n    pointHoverBorderColor: rgba(colors, 0.95)\n  };\n}\nfunction formatBarColor(colors) {\n  return {\n    backgroundColor: rgba(colors, 0.75),\n    borderColor: rgba(colors, 1),\n    hoverBackgroundColor: rgba(colors, 1),\n    hoverBorderColor: rgba(colors, 1)\n  };\n}\nfunction formatPieColors(colors) {\n  return {\n    backgroundColor: colors.map(color => rgba(color, 0.76)),\n    borderColor: colors.map(() => '#fff'),\n    pointBackgroundColor: colors.map(color => rgba(color, 1)),\n    pointBorderColor: colors.map(() => '#fff'),\n    pointHoverBackgroundColor: colors.map(color => rgba(color, 1)),\n    pointHoverBorderColor: colors.map(color => rgba(color, 1))\n  };\n}\nfunction formatPolarAreaColors(colors) {\n  return {\n    backgroundColor: colors.map(color => rgba(color, 0.75)),\n    borderColor: colors.map(color => rgba(color, 1)),\n    hoverBackgroundColor: colors.map(color => rgba(color, 1)),\n    hoverBorderColor: colors.map(color => rgba(color, 1))\n  };\n}\nfunction getRandomColor() {\n  return [getRandomInt(0, 255), getRandomInt(0, 255), getRandomInt(0, 255)];\n}\n/**\r\n* @method Generate colors for line|bar charts\r\n* @param index he index of the default color array. eg. 0, 1\r\n* @return number[]\r\n* @author vincent 2019-01-22\r\n* @version 0.0.0\r\n* @example\r\n* @log 1. vincent,2019-01-22,done\r\n*/\nfunction generateColor(index) {\n  return DefaultColors[index] || getRandomColor();\n}\n/**\r\n* @method Generate colors for pie|doughnut charts\r\n* @param count Length of data. eg. datasets.data.length\r\n* @return number[][]\r\n* @author vincent 2019-01-22\r\n* @version 0.0.0\r\n* @example\r\n* @log 1. vincent,2019-01-22,done\r\n*/\nfunction generateColors(count) {\n  const colorsArr = new Array(count);\n  for (let i = 0; i < count; i++) {\n    colorsArr[i] = DefaultColors[i] || getRandomColor();\n  }\n  return colorsArr;\n}\n/**\r\n* @method Generate colors by chart type\r\n* @param chartType The type of chart you are using. eg. line,bar\r\n* @param index The index of the default color array. eg. DefaultColors[index]\r\n* @param count Length of data. eg. datasets.data.length\r\n* @return Color or number[]\r\n* @author vincent 2019-01-22\r\n* @version 0.0.0\r\n* @example\r\n* @log 1. vincent,2019-01-22,done\r\n*/\nfunction getColors(chartType, index, count) {\n  if (chartType === 'pie' || chartType === 'doughnut' || chartType === 'bubble' || chartType === 'scatter') {\n    return formatPieColors(generateColors(count));\n  }\n  if (chartType === 'polarArea') {\n    return formatPolarAreaColors(generateColors(count));\n  }\n  if (chartType === 'line' || chartType === 'radar') {\n    return formatLineColor(generateColor(index));\n  }\n  if (chartType === 'bar' || chartType === 'horizontalBar') {\n    return formatBarColor(generateColor(index));\n  }\n  return generateColor(index);\n}\n\n/* tslint:disable-next-line */\nclass NgChartjsDirective {\n  constructor(element, ngChartjsService, storeService, zone) {\n    this.ngChartjsService = ngChartjsService;\n    this.storeService = storeService;\n    this.zone = zone;\n    // x轴标签。这对图表来说是必要的：线，条和雷达。并且只是图表的标签（悬停）：polarArea，pie和doughnut\n    this.labels = [];\n    this.noZone = true; // disable angular NgZone\n    // @ts-ignore\n    this.id = null; // chart instance id\n    // 鼠标点击图表所有的区域\n    this.chartClick = new EventEmitter();\n    // 鼠标悬浮在标签或者活跃的点上面时\n    this.chartHover = new EventEmitter();\n    this.initFlag = false;\n    this.hasChanges = false;\n    this.element = element; // 获取指令所在canvas元素\n  }\n  ngOnInit() {\n    this.ctx = this.element.nativeElement.getContext('2d'); // 获取元素的ctx\n    this.initFlag = true; // 是否初始化了的标志\n    if (this.data || this.datasets) {\n      // 判断data和datasets有一个有数据就刷新\n      if (this.noZone) {\n        this.zone.runOutsideAngular(() => {\n          this.refresh();\n        });\n      } else {\n        this.refresh();\n      }\n    }\n  }\n  ngOnChanges(changes) {\n    // TODO: 插件变化刷新，开放刷新按钮\n    if (this.initFlag) {\n      // Check if the changes are in the data or datasets\n      if (changes.hasOwnProperty('data') || changes.hasOwnProperty('datasets')) {\n        if (changes.data) {\n          this.updateChartData(changes.data.currentValue);\n        } else {\n          this.updateChartData(changes.datasets.currentValue);\n        }\n        this.hasChanges = true;\n      }\n      if (changes.hasOwnProperty('labels')) {\n        this.chart.data.labels = changes.labels.currentValue;\n        this.hasChanges = true;\n      }\n      if (changes.hasOwnProperty('legend')) {\n        if (changes.legend.currentValue !== changes.legend.previousValue) {\n          // @ts-ignore\n          this.chart.options.plugins.legend.display = changes.legend.currentValue;\n          this.hasChanges = true;\n        }\n      }\n      if (changes.hasOwnProperty('adding')) {\n        this.addData_(changes.adding.currentValue.labels, changes.adding.currentValue.data);\n        this.hasChanges = true;\n      }\n      if (changes.hasOwnProperty('removing')) {\n        if (changes.removing.currentValue.orientation === 'oldest' || changes.removing.currentValue.orientation === 'latest') {\n          this.removeData_(changes.removing.currentValue.orientation);\n          this.hasChanges = true;\n        }\n      }\n      if (changes.hasOwnProperty('chartType')) {\n        this.refresh();\n      }\n      if (changes.hasOwnProperty('resetOption')) {\n        const resetOption = deepCopyJson(changes.resetOption.currentValue);\n        this.chart.options = mergeJson(resetOption, this.chart.options);\n        this.hasChanges = true;\n      }\n      if (this.hasChanges) {\n        this.chart.update();\n        this.hasChanges = false;\n      }\n      // change chart id\n      if (changes.hasOwnProperty('id')) {\n        this.removeChart(changes.id.previousValue);\n        this.addChart(changes.id.currentValue);\n      }\n    }\n  }\n  ngOnDestroy() {\n    if (this.chart) {\n      this.chart.destroy();\n      // @ts-ignore\n      this.chart = void 0;\n      this.removeChart(this.id);\n    }\n  }\n  // update chartjs\n  update() {\n    this.chart.update();\n  }\n  // Dynamic add data\n  addData(labels, data) {\n    this.addData_(labels, data);\n    this.update();\n  }\n  // Dynamic remove data, orientation is 'ildest' or 'latest'\n  removeData(orientation) {\n    this.removeData_(orientation);\n    this.update();\n  }\n  refresh() {\n    this.ngOnDestroy();\n    this.chart = this.getChartBuilder(this.ctx /*, data, this.options*/);\n    this.addChart(this.id);\n  }\n  removeChart(id) {\n    if (this.element.nativeElement.hasAttribute('id')) {\n      this.storeService.removeChart(this.element.nativeElement.id);\n      return;\n    }\n    if (id !== null && id !== undefined) {\n      this.storeService.removeChart(id); // delete chart instance.\n    }\n  }\n  addChart(id) {\n    if (this.element.nativeElement.hasAttribute('id')) {\n      this.storeService.addChart(this.element.nativeElement.id, this.chart);\n      return;\n    }\n    if (id !== null && id !== undefined) {\n      this.storeService.addChart(id, this.chart);\n    }\n  }\n  updateChartData(newDataValues) {\n    if (Array.isArray(newDataValues[0].data)) {\n      // @ts-ignore\n      // this.chart.data.datasets.forEach((dataset: ChartDataset, i: number) => {\n      //   dataset.data = newDataValues[i].data;\n      //   if (newDataValues[i].label) {\n      //     dataset.label = newDataValues[i].label;\n      //   }\n      // });\n      // @ts-ignore\n      this.chart.data.datasets = newDataValues;\n    } else {\n      // @ts-ignore\n      this.chart.data.datasets[0].data = newDataValues;\n    }\n    // update colors\n    // @ts-ignore\n    this.chart.data.datasets = this.updateColors(this.chart.data.datasets);\n  }\n  getChartBuilder(ctx /*, data:Array<any>, options:any*/) {\n    const datasets = this.getDatasets();\n    let options = this.options || {};\n    options = Object.assign({}, this.options); // 深复制options\n    mergeJson(options, {\n      plugins: {\n        legend: {\n          display: this.legend\n        }\n      }\n    });\n    // hock for onHover and onClick events\n    options.hover = options.hover || {};\n    if (!options.onHover) {\n      options.onHover = (event, active) => {\n        if (active && !active.length) {\n          return;\n        }\n        this.chartHover.emit({\n          event,\n          active\n        });\n      };\n    }\n    if (!options.onClick) {\n      options.onClick = (event, active) => {\n        this.chartClick.emit({\n          event,\n          active\n        });\n      };\n    }\n    const inlinePlugins = this.inlinePlugins || [];\n    const opts = {\n      type: this.chartType,\n      data: {\n        labels: this.labels,\n        datasets: datasets // TODO: 后续更改这个属性名字，否则警告\n      },\n      options: options,\n      plugins: inlinePlugins\n    };\n    return new Chart$1(ctx, opts);\n  }\n  // 获取 chart.js的datasets数据\n  getDatasets() {\n    // @ts-ignore\n    let datasets = void 0;\n    // in case if datasets is not provided, but data is present\n    if (!this.datasets || !this.datasets.length && this.data && this.data.length) {\n      if (Array.isArray(this.data[0])) {\n        datasets = this.data.map((data, index) => {\n          return {\n            data,\n            label: this.labels[index] || `Label ${index}`\n          };\n        });\n      } else {\n        datasets = [{\n          data: this.data,\n          label: `Label 0`\n        }];\n      }\n    }\n    datasets = this.updateColors(datasets); // update colors\n    if (!datasets) {\n      throw new Error(`ng-chartjs configuration error,\n      data or datasets field are required to render char ${this.chartType}`);\n    }\n    return datasets;\n  }\n  // update dataset colors\n  updateColors(datasets) {\n    if (this.datasets && this.datasets.length || datasets && datasets.length) {\n      // fix elm type, pre type is number\n      datasets = (this.datasets || datasets).map((elm, index) => {\n        const newElm = Object.assign({}, elm);\n        if (this.colors && this.colors.length) {\n          Object.assign(newElm, this.colors[index]);\n        } else {\n          // @ts-ignore\n          Object.assign(newElm, getColors(this.chartType, index, newElm.data.length));\n        }\n        return newElm;\n      });\n    }\n    return datasets;\n  }\n  addData_(labels, data) {\n    if (labels.length === 0 || data.length === 0) {\n      return;\n    }\n    // update labels\n    // @ts-ignore\n    labels.forEach(label => {\n      this.chart.data.labels.push(label);\n    });\n    // @ts-ignore\n    this.chart.data.datasets.forEach((dataset, index) => {\n      if (data[index]) {\n        for (let i = 0; i < data[index].length; i++) {\n          // @ts-ignore\n          dataset.data.push(data[index][i]);\n        }\n      } else {\n        console.log('The added data does not match the original data');\n        return;\n      }\n    });\n  }\n  removeData_(orientation) {\n    // fix: support to oldest feature\n    if (orientation === 'latest') {\n      // @ts-ignore\n      this.chart.data.labels.pop();\n      // @ts-ignore\n      this.chart.data.datasets.forEach(dataset => {\n        // @ts-ignore\n        dataset.data.pop();\n      });\n    } else if (orientation === 'oldest') {\n      // @ts-ignore\n      this.chart.data.labels.shift();\n      // @ts-ignore\n      this.chart.data.datasets.forEach(dataset => {\n        // @ts-ignore\n        dataset.data.shift();\n      });\n    }\n  }\n}\nNgChartjsDirective.ɵfac = function NgChartjsDirective_Factory(__ngFactoryType__) {\n  return new (__ngFactoryType__ || NgChartjsDirective)(i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(NgChartjsService), i0.ɵɵdirectiveInject(StoreService), i0.ɵɵdirectiveInject(i0.NgZone));\n};\nNgChartjsDirective.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n  type: NgChartjsDirective,\n  selectors: [[\"canvas\", \"ngChartjs\", \"\"]],\n  inputs: {\n    data: \"data\",\n    datasets: \"datasets\",\n    labels: \"labels\",\n    options: \"options\",\n    inlinePlugins: \"inlinePlugins\",\n    chartType: \"chartType\",\n    colors: \"colors\",\n    legend: \"legend\",\n    adding: \"adding\",\n    removing: \"removing\",\n    resetOption: \"resetOption\",\n    noZone: \"noZone\",\n    id: \"id\"\n  },\n  outputs: {\n    chartClick: \"chartClick\",\n    chartHover: \"chartHover\"\n  },\n  exportAs: [\"ngChartjs\"],\n  features: [i0.ɵɵNgOnChangesFeature]\n});\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(NgChartjsDirective, [{\n    type: Directive,\n    args: [{\n      selector: 'canvas[ngChartjs]',\n      exportAs: 'ngChartjs'\n    }]\n  }], function () {\n    return [{\n      type: i0.ElementRef\n    }, {\n      type: NgChartjsService\n    }, {\n      type: StoreService\n    }, {\n      type: i0.NgZone\n    }];\n  }, {\n    data: [{\n      type: Input\n    }],\n    datasets: [{\n      type: Input\n    }],\n    labels: [{\n      type: Input\n    }],\n    options: [{\n      type: Input\n    }],\n    inlinePlugins: [{\n      type: Input\n    }],\n    chartType: [{\n      type: Input\n    }],\n    colors: [{\n      type: Input\n    }],\n    legend: [{\n      type: Input\n    }],\n    adding: [{\n      type: Input\n    }],\n    removing: [{\n      type: Input\n    }],\n    resetOption: [{\n      type: Input\n    }],\n    noZone: [{\n      type: Input\n    }],\n    id: [{\n      type: Input\n    }],\n    chartClick: [{\n      type: Output\n    }],\n    chartHover: [{\n      type: Output\n    }]\n  });\n})();\nclass NgChartjsModule {\n  /**\r\n   * Register a plugin.\r\n   * @param plugins\r\n   */\n  static registerPlugin(plugins = []) {\n    const config = new NgChartjsCustomPluginConfig();\n    config.plugins = plugins;\n    return {\n      ngModule: NgChartjsModule,\n      providers: [{\n        provide: NgChartjsCustomPluginConfig,\n        useValue: config\n      }]\n    };\n  }\n}\nNgChartjsModule.ɵfac = function NgChartjsModule_Factory(__ngFactoryType__) {\n  return new (__ngFactoryType__ || NgChartjsModule)();\n};\nNgChartjsModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n  type: NgChartjsModule,\n  declarations: [NgChartjsDirective],\n  exports: [NgChartjsDirective]\n});\nNgChartjsModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n  providers: [NgChartjsService]\n});\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(NgChartjsModule, [{\n    type: NgModule,\n    args: [{\n      imports: [],\n      declarations: [NgChartjsDirective],\n      exports: [NgChartjsDirective],\n      providers: [NgChartjsService]\n    }]\n  }], null, null);\n})();\n\n/*\r\n * Public API Surface of ng-chartjs\r\n */\n\n/**\r\n * Generated bundle index. Do not edit.\r\n */\n\nexport { DefaultColors, NgChartjsDirective, NgChartjsModule, NgChartjsService, deepCopyJson, formatBarColor, formatLineColor, formatPieColors, formatPolarAreaColors, generateColor, generateColors, getColors, getRandomColor, getRandomInt, isJson, mergeJson, rgba };\n"],
  "mappings": "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",
  "names": []
}
